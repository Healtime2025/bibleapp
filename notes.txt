<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>üìù My Notes | GraceVoice</title>
  <link rel="manifest" href="manifest.json">
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f4f4f4;
      text-align: center;
      padding: 30px;
      margin-bottom: 80px;
      transition: background 0.3s, color 0.3s;
    }
    h1 { font-size: 28px; color: #2c3e50; margin-bottom: 20px; }
    .note-box { background: white; padding: 20px; max-width: 700px; margin: 0 auto 30px; border-radius: 10px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); text-align: left; }
    textarea, input[type="text"] { width: 100%; padding: 12px; margin-top: 10px; border: 1px solid #ccc; border-radius: 6px; font-size: 16px; box-sizing: border-box; }
    button { padding: 10px 18px; margin: 10px 6px; font-size: 16px; border: none; background: #1976d2; color: white; border-radius: 6px; cursor: pointer; }
    button:hover { background: #145a9e; }
    .note-item { background: #fff; border: 1px solid #ddd; padding: 15px; margin: 10px auto; max-width: 700px; border-radius: 8px; text-align: left; }
    .timestamp { font-size: 12px; color: #888; }
    .night-mode { background-color: #1c1c1c; color: #e0e0e0; }
    .night-mode .note-box, .night-mode .note-item { background-color: #2b2b2b; color: #e0e0e0; border-color: #555; }
  </style>
</head>
<body>
  <div class="top-buttons">
    <button onclick="window.location.href='index.html'">üè† Home</button>
    <button onclick="toggleTheme()">üåì Theme</button>
    <button onclick="exportNotes()">üì§ Export</button>
  </div>

  <h1>üìù My Notes</h1>

  <div class="note-box">
    <input type="text" id="noteTitle" placeholder="Note Title (optional)">
    <textarea id="noteText" rows="6" placeholder="Write your note..."></textarea>
    <button onclick="saveNote()">üíæ Save Note</button>
    <button onclick="clearInputs()">üßπ Clear</button>
  </div>

  <div id="notesList"></div>

  <script>
    let globalNotes = [];

    function saveNote() {
      const title = document.getElementById('noteTitle').value.trim();
      const text = document.getElementById('noteText').value.trim();
      if (!text) return alert("Note cannot be empty.");

      const newNote = { title, content: text, timestamp: new Date().toISOString() };
      globalNotes.push(newNote);
      localStorage.setItem("graceNotes", JSON.stringify(globalNotes));
      clearInputs();
      renderNotes();
      alert("‚úÖ Note saved!");
    }

    function clearInputs() {
      document.getElementById('noteTitle').value = "";
      document.getElementById('noteText').value = "";
    }

    function renderNotes() {
      const container = document.getElementById('notesList');
      container.innerHTML = "";
      if (globalNotes.length === 0) { container.innerHTML = "<p>No notes saved yet.</p>"; return; }

      globalNotes.slice().reverse().forEach((note, index) => {
        const div = document.createElement("div");
        div.className = "note-item";
        div.innerHTML = `<b>${note.title || "Untitled Note"}</b><br><p>${note.content}</p><div class="timestamp">üïí ${new Date(note.timestamp).toLocaleString()}</div><button onclick="deleteNote(${index})">‚ùå Delete</button>`;
        container.appendChild(div);
      });
    }

    function deleteNote(index) {
      if (!confirm("Are you sure you want to delete this note?")) return;
      globalNotes.splice(index, 1);
      localStorage.setItem("graceNotes", JSON.stringify(globalNotes));
      renderNotes();
    }

    function toggleTheme() {
      document.body.classList.toggle("night-mode");
      localStorage.setItem("graceTheme", document.body.classList.contains("night-mode") ? "dark" : "light");
    }

    window.onload = () => {
      if (localStorage.getItem("graceTheme") === "dark") { document.body.classList.add("night-mode"); }
      globalNotes = JSON.parse(localStorage.getItem("graceNotes") || "[]");
      renderNotes();
    };
  </script>
</body>
</html>
